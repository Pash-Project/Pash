// Copyright (C) Pash Contributors. License: GPL/BSD. See https://github.com/Pash-Project/Pash/

using System;
using System.Management.Automation;
using System.ServiceProcess;

namespace Microsoft.PowerShell.Commands
{
    /// <summary>
    /// NAME
    ///   Restart-Service
    /// 
    /// DESCRIPTION
    ///   Restarts system services available currently running on the system. If the service is stopped before the command is issued, it is started without any notification.
    /// 
    /// RELATED PASH COMMANDS
    ///   Stop-Service
    ///   Get-Service
    ///   Suspend-Service
    ///   Resume-Service
    /// </summary>
    [Cmdlet("Restart", "Service", DefaultParameterSetName = "Default", SupportsShouldProcess = true)]
    public sealed class RestartServiceCommand : Cmdlet
    {
        protected override void ProcessRecord()
        {
            ServiceController[] _services = ServiceController.GetServices();
            foreach (String _name in Name)
                foreach (ServiceController _service in _services)
                {
                    if ((_service.ServiceName == _name) && (_service.CanStop))
                    {
                        if (!Force.ToBool())
                            if (_service.DependentServices.Length != 0)
                                WriteError(new ErrorRecord(new InvalidOperationException("Cannot stop service \"" + _service.ServiceName + "\" because other services are dependent on it. Use -Force to override."), "ServiceHasDependentServices", ErrorCategory.InvalidOperation, _service));
                            else
                            {
                                // Stops the service, waits for the service to be actually stopped before starting it again
                                _service.Stop();
                                _service.WaitForStatus(ServiceControllerStatus.Stopped);
                                _service.Start();
                            }
                        else
                        {
                            _service.Stop();
                            _service.WaitForStatus(ServiceControllerStatus.Stopped);
                            _service.Start();
                        }

                        _service.WaitForStatus(ServiceControllerStatus.Running);
                        if (PassThru.ToBool()) WriteObject(_service);
                    }
                }
        }

        /// <summary>
        /// Force the service to be restarted even if the service has dependend services.
        /// </summary>
        [Parameter]
        public SwitchParameter Force { get; set; }

        /// <summary>
        /// Specifies the name of the service to be restarted.
        /// </summary>
        [Alias(new string[] { "ServiceName" }),
         Parameter(Position = 0, ParameterSetName = "Default", Mandatory = true, ValueFromPipelineByPropertyName = true, ValueFromPipeline = true)]
        public string[] Name { get; set; }

        /// <summary>
        /// Passes all objects passed into the cmdlet or generated by the cmdlet along the pipeline.
        /// </summary>
        [Parameter]
        public SwitchParameter PassThru { get; set; }
    }

}
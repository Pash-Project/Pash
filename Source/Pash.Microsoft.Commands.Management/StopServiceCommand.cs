// Copyright (C) Pash Contributors. License: GPL/BSD. See https://github.com/Pash-Project/Pash/

using System;
using System.Management.Automation;
using System.ServiceProcess;

namespace Microsoft.PowerShell.Commands
{
    /// <summary>
    /// NAME
    ///   Stop-Service
    /// 
    /// DESCRIPTION
    ///   Stops the given system service(s).
    /// 
    /// RELATED PASH COMMANDS
    ///   Stop-Service
    ///   Restart-Service
    ///   Suspend-Service
    ///   Resume-Service
    /// </summary>
    [Cmdlet("Stop", "Service", DefaultParameterSetName = "Default", SupportsShouldProcess = true)]
    public sealed class StopServiceCommand : Cmdlet
    {
        protected override void ProcessRecord()
        {
            ServiceController[] _services = ServiceController.GetServices();

            foreach (String _name in Name)
                foreach (ServiceController _service in _services)
                {
                    if (_service.ServiceName.ToLower() == _name.ToLower())
                    {
                        if (!_service.CanStop)
                        {
                            WriteError(new ErrorRecord(
                                    new InvalidOperationException(
                                        "Cannot stop service \"" + _service.ServiceName + "\". The service might be an important service or may be in an unresponsive state."),
                                        "ServiceCanNotStop",
                                        ErrorCategory.InvalidOperation,
                                        _service));
                            continue;
                        }

                        if (!Force.ToBool())
                        {
                            if (_service.DependentServices.Length != 0)
                            {
                                WriteError(new ErrorRecord(
                                    new InvalidOperationException(
                                        "Cannot stop service \"" + _service.ServiceName + "\" because other services are dependent on it. Use -Force to override."),
                                        "ServiceHasDependentServices",
                                        ErrorCategory.InvalidOperation,
                                        _service));
                            }

                            else _service.Stop();
                        }

                        else _service.Stop();

                        _service.WaitForStatus(ServiceControllerStatus.Stopped);

                        if (PassThru.ToBool()) WriteObject(_service);
                    }
                }
        }

        /// <summary>
        /// Force the service to be stopped even if the service has dependend services.
        /// </summary>
        [Parameter]
        public SwitchParameter Force { get; set; }


        /// <summary>
        /// Specifies the name of the service to be stopped.
        /// </summary>
        [Alias(new string[] { "ServiceName" }),
         Parameter(
             ParameterSetName = "Default", 
             Position = 0, 
             Mandatory = true, 
             ValueFromPipelineByPropertyName = true, 
             ValueFromPipeline = true)]
        public string[] Name { get; set; }

        /// <summary>
        /// Passes all objects passed into the cmdlet or generated by the cmdlet along the pipeline.
        /// </summary>
        [Parameter]
        public SwitchParameter PassThru { get; set; }
    }

}
